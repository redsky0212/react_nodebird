{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.eb2d2e68ad20797e6099.hot-update.js","sources":["webpack:///./components/PostCard.js","webpack:///./components/PostCardContent.js","webpack:///./pages/index.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport {Card, Icon, Button, Avatar, Form, List, Input, Comment} from 'antd';\r\nimport PropsTypes from 'prop-types';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nimport PostCardContent from './PostCardContent';\r\n\r\nconst PostCard = ({v}) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const {me} = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment} = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true]);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!me){\r\n            return alert('로그인이 필요합니다!');\r\n        }\r\n        return dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: {postId: v.id}\r\n        });\r\n    },[me && me.id]);\r\n\r\n    const onToggleComment = useCallback((e) => {\r\n        setCommentFormOpened(prev => !prev);\r\n    }, []);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        e.preventDefault();\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n        <Card\r\n            \r\n            actions={[\r\n                <Icon type=\"retweet\" key=\"retweet\" />,\r\n                <Icon type=\"heart\" key=\"heart\" />,\r\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n                <Icon type=\"ellipsis\" key=\"ellipsis\" />,\r\n            ]}\r\n            extra={<Button>팔로우</Button>}\r\n        >\r\n            <Card.Meta\r\n                avatar={<Avatar>{v.User.nickname[0]}</Avatar>}\r\n                title={v.User.nickname}\r\n                description={<PostCardContent postData={v.content} />}\r\n            />\r\n        </Card>\r\n        {commentFormOpened && (\r\n            <>\r\n                <Form onSubmit={onSubmitComment}>\r\n                    <Form.Item>\r\n                        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                    </Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n                </Form>\r\n                <List\r\n                    header={`${v.Comments ? v.Comments.length : 0} 댓글`}\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={v.Comments || []}\r\n                    renderItem={item => (\r\n                        <li>\r\n                            <Comment \r\n                                author={item.User.nickname} \r\n                                avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                content={item.content}\r\n                                 />\r\n                        </li>\r\n                    )}\r\n                >\r\n                </List>\r\n            </>\r\n        )}\r\n        </div>\r\n    );\r\n}\r\n\r\nPostCard.propsTypes = {\r\n    v: PropsTypes.shape({\r\n        User: PropsTypes.object,\r\n        content: PropsTypes.string,\r\n        img: PropsTypes.string,\r\n        createdAt: PropsTypes.object\r\n    })\r\n};\r\n\r\nexport default PostCard;","import React from 'react';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PostCardContent = ({ postData }) => {\r\n    return (\r\n        <div>\r\n            {postData.split(/(#[^\\s]+)/g).map((v) => {\r\n                if (v.match(/#[^\\s]+/)) {\r\n                    return (\r\n                        <Link\r\n                            href={{ pathname: '/hashtag', query: { tag: v.slice(1) } }}\r\n                            as={`/hashtag/${v.slice(1)}`}\r\n                            key={v}\r\n                        >\r\n                            <a>{v}</a>\r\n                        </Link>\r\n                    );\r\n                }\r\n                return v;\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nPostCardContent.propTypes = {\r\n    postData: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PostCardContent;","import React, { useEffect } from 'react';\r\nimport Link from 'next/link'; \r\nimport { Form, Input, Button, Card, Icon, Avatar } from 'antd';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { loginAction, logoutAction } from '../reducers/user';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Home = () => {\r\n    // redux의 state를 가져와 쓰는 방법\r\n    const { me } = useSelector(state => state.user);\r\n    const { mainPosts } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch({\r\n            type: LOAD_MAIN_POSTS_REQUEST,\r\n        });\r\n    }, []);\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {me ? <div>로그인 했습니다: {me.nickname}</div>:<div>로그아웃 했습니다.</div>}\r\n            {me && <PostForm /> }\r\n            {\r\n                mainPosts.map((v, i) => {\r\n                    return (\r\n                        <PostCard key={+v.createdAt} v={v} />\r\n                    );\r\n                })\r\n            }\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AADA;AAIA;AAAA;AAJA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AARA;AAWA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AAFA;AAJA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;;;;;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAQA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AAAA;AAFA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AAGA;AAEA;AACA;AACA;AADA;AAGA;AAGA;AAMA;AACA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;;;;A","sourceRoot":""}