{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.32c4f20e5fb51e6d8f88.hot-update.js","sources":["webpack:///./reducers/user.js","webpack:///./sagas/user.js"],"sourcesContent":["const dummyUser = {\r\n    nickname: 'redsky',\r\n    Post: [],\r\n    Followings: [],\r\n    Followers: [],\r\n};\r\n\r\nexport const initialState = {\r\n    isLoggedIn: false,\r\n    user: null,\r\n    signUpData: {},\r\n};\r\n\r\n// action\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\n\r\nexport const loginAction = {\r\n    type: LOG_IN_REQUEST,\r\n    data: {\r\n        nickname: 'redsky',\r\n    }\r\n};\r\nexport const logoutAction = {\r\n    type: LOG_OUT_REQUEST,\r\n\r\n}\r\n// 동적인 데이터 처리는 함수로 argument를 받아서 셋팅한다.\r\nexport const signupAction = (data) => {\r\n    return {\r\n        type: SIGN_UP_REQUEST,\r\n        data: data\r\n    }\r\n}\r\n\r\n// reducer\r\nconst reducer = (state=initialState, action) => {\r\n    switch( action.type ){\r\n        case LOG_IN_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                user: dummyUser,\r\n            }\r\n        }\r\n        case LOG_OUT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                user:null,\r\n            }\r\n        }\r\n        case SIGN_UP_REQUEST: {\r\n            return {\r\n                ...state,\r\n                signUpData: action.data\r\n            }\r\n        }\r\n        default: {\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default reducer;","import { all, fork, takeLatest, call, put} from 'redux-saga/effects';\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\nfunction loginAPI(){\r\n    // 서버요청 부분\r\n    // axios처리\r\n}\r\n\r\nfunction* login(){\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put({     // put 은 dispatch와 같은 기능\r\n            type:LOG_IN_SUCCESS\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST, login);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n    ]);\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAHA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AAzBA;AA2BA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC/DA;;;AAcA;;;AAIA;AACA;AA3BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AAAA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AAPA;AAQA;AACA;AADA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}