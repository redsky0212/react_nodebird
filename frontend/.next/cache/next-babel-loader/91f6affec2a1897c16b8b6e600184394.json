{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nconst dummyUser = {\n  nickname: '제로초',\n  Post: [],\n  Followings: [],\n  Followers: [],\n  id: 1\n};\nexport const initialState = {\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: '',\n  // 로그인 실패 사유\n  isSignedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  signUpErrorReason: '',\n  // 회원가입 실패 사유\n  me: null,\n  // 내 정보\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null // 남의 정보\n\n};\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; // 액션의 이름\n\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'; // 액션의 이름\n\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; // 액션의 이름\n\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE';\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const loginRequestAction = ({\n  userId,\n  password\n}) => {\n  return {\n    type: LOG_IN_REQUEST,\n    data: {\n      userId,\n      password\n    }\n  };\n};\nexport const logoutRequestAction = {\n  type: LOG_OUT_REQUEST\n}; // 동적인 데이터 처리는 함수로 argument를 받아서 셋팅한다.\n\nexport const signupRequestAction = data => {\n  return {\n    type: SIGN_UP_REQUEST,\n    data: data\n  };\n};\nexport const signupSuccess = {\n  type: SIGN_UP_SUCCESS\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: true,\n          logInErrorReason: ''\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          me: action.data,\n          isLoading: false\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          logInErrorReason: action.error,\n          me: null\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: true\n        });\n      }\n\n    case LOG_OUT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: false,\n          me: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: true,\n          isSignedUp: false,\n          signUpErrorReason: ''\n        });\n      }\n\n    case SIGN_UP_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          isSignedUp: true\n        });\n      }\n\n    case SIGN_UP_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          signUpErrorReason: action.error\n        });\n      }\n\n    case LOAD_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_USER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: action.data\n        });\n      }\n\n    case LOAD_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["C:\\Users\\SKTelecom\\Documents\\jwh\\myproj\\react_proj_study\\react_nodebird\\frontend\\reducers\\user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","id","initialState","isLoggingOut","isLoggingIn","logInErrorReason","isSignedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOW_REQUEST","LOAD_FOLLOW_SUCCESS","LOAD_FOLLOW_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","loginRequestAction","userId","password","type","data","logoutRequestAction","signupRequestAction","signupSuccess","state","action","isLoading","error"],"mappings":"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","sourcesContent":["const dummyUser = {\r\n    nickname: '제로초',\r\n    Post: [],\r\n    Followings: [],\r\n    Followers: [],\r\n    id: 1,\r\n};\r\n\r\nexport const initialState = {\r\n    isLoggingOut: false, // 로그아웃 시도중\r\n    isLoggingIn: false, // 로그인 시도중\r\n    logInErrorReason: '', // 로그인 실패 사유\r\n    isSignedUp: false, // 회원가입 성공\r\n    isSigningUp: false, // 회원가입 시도중\r\n    signUpErrorReason: '', // 회원가입 실패 사유\r\n    me: null, // 내 정보\r\n    followingList: [], // 팔로잉 리스트\r\n    followerList: [], // 팔로워 리스트\r\n    userInfo: null, // 남의 정보\r\n};\r\n\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; // 액션의 이름\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'; // 액션의 이름\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; // 액션의 이름\r\n\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n\r\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\r\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\r\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE';\r\n\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\n\r\n\r\nexport const loginRequestAction = ({ userId, password }) => {\r\n    return {\r\n        type: LOG_IN_REQUEST,\r\n        data: { userId, password }\r\n    }\r\n}\r\nexport const logoutRequestAction = {\r\n    type: LOG_OUT_REQUEST,\r\n\r\n}\r\n// 동적인 데이터 처리는 함수로 argument를 받아서 셋팅한다.\r\nexport const signupRequestAction = (data) => {\r\n    return {\r\n        type: SIGN_UP_REQUEST,\r\n        data: data\r\n    }\r\n}\r\nexport const signupSuccess = {\r\n    type: SIGN_UP_SUCCESS,\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isLoggingIn: true,\r\n                logInErrorReason: '',\r\n            };\r\n        }\r\n        case LOG_IN_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoggingIn: false,\r\n                me: action.data,\r\n                isLoading: false,\r\n            };\r\n        }\r\n        case LOG_IN_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isLoggingIn: false,\r\n                logInErrorReason: action.error,\r\n                me: null,\r\n            };\r\n        }\r\n        case LOG_OUT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isLoggingOut: true,\r\n            };\r\n        }\r\n        case LOG_OUT_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoggingOut: false,\r\n                me: null,\r\n            };\r\n        }\r\n        case SIGN_UP_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isSigningUp: true,\r\n                isSignedUp: false,\r\n                signUpErrorReason: '',\r\n            };\r\n        }\r\n        case SIGN_UP_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isSigningUp: false,\r\n                isSignedUp: true,\r\n            };\r\n        }\r\n        case SIGN_UP_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isSigningUp: false,\r\n                signUpErrorReason: action.error,\r\n            };\r\n        }\r\n        case LOAD_USER_REQUEST: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case LOAD_USER_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                me: action.data,\r\n            };\r\n        }\r\n        case LOAD_USER_FAILURE: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        default: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}