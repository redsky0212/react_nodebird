{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: '',\n  // 로그인 실패 사유\n  isSignedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  signUpErrorReason: '',\n  // 회원가입 실패 사유\n  me: null,\n  // 내 정보\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null,\n  // 남의 정보\n  isEditingNickname: false,\n  // 이름 변경 중\n  editNicknameErrorReason: '',\n  // 이름 변경 실패 사유\n  hasMoreFollower: false,\n  hasMoreFollowing: false\n};\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; // 액션의 이름\n\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'; // 액션의 이름\n\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; // 액션의 이름\n\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport const EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\nexport const EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\nexport const EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOG_IN_REQUEST:\n        {\n          draft.isLoggingIn = true;\n          draft.logInErrorReason = '';\n          break;\n        }\n\n      case LOG_IN_SUCCESS:\n        {\n          draft.isLoggingIn = false;\n          draft.logInErrorReason = '';\n          draft.me = action.data;\n          break;\n        }\n\n      case LOG_IN_FAILURE:\n        {\n          draft.isLoggingIn = false;\n          draft.logInErrorReason = action.reason;\n          draft.me = null;\n          break;\n        }\n\n      case LOG_OUT_REQUEST:\n        {\n          draft.isLoggingOut = true;\n          break;\n        }\n\n      case LOG_OUT_SUCCESS:\n        {\n          draft.isLoggingOut = false;\n          draft.me = null;\n          break;\n        }\n\n      case SIGN_UP_REQUEST:\n        {\n          draft.isSignedUp = false;\n          draft.isSigningUp = true;\n          draft.signUpErrorReason = '';\n          break;\n        }\n\n      case SIGN_UP_SUCCESS:\n        {\n          draft.isSigningUp = false;\n          draft.isSignedUp = true;\n          break;\n        }\n\n      case SIGN_UP_FAILURE:\n        {\n          draft.isSigningUp = false;\n          draft.signUpErrorReason = action.error;\n          break;\n        }\n\n      case LOAD_USER_REQUEST:\n        {\n          break;\n        }\n\n      case LOAD_USER_SUCCESS:\n        {\n          if (action.me) {\n            draft.me = action.data;\n            break;\n          }\n\n          draft.useInfo = action.data;\n          break;\n        }\n\n      case LOAD_USER_FAILURE:\n        {\n          break;\n        }\n\n      case FOLLOW_USER_REQUEST:\n        {\n          break;\n        }\n\n      case FOLLOW_USER_SUCCESS:\n        {\n          draft.me.Followings.unshift({\n            id: action.data\n          });\n          break;\n        }\n\n      case FOLLOW_USER_FAILURE:\n        {\n          break;\n        }\n\n      case UNFOLLOW_USER_REQUEST:\n        {\n          break;\n        }\n\n      case UNFOLLOW_USER_SUCCESS:\n        {\n          const index = draft.me.Followings.findIndex(v => v.id === action.data);\n          draft.me.Followings.splice(index, 1);\n          const index2 = draft.followingList.findIndex(v => v.id === action.data);\n          draft.followingList.splice(index2, 1);\n          break;\n        }\n\n      case UNFOLLOW_USER_FAILURE:\n        {\n          break;\n        }\n\n      case ADD_POST_TO_ME:\n        {\n          draft.me.Posts.unshift({\n            id: action.data\n          });\n          break;\n        }\n\n      case REMOVE_POST_OF_ME:\n        {\n          const index = draft.me.Posts.findIndex(v => v.id === action.data);\n          draft.me.Posts.splice(index, 1);\n          break;\n        }\n\n      case LOAD_FOLLOWERS_REQUEST:\n        {\n          draft.followerList = !action.offset ? [] : draft.followerList;\n          draft.hasMoreFollower = action.offset ? draft.hasMoreFollower : true; // 처음 데이터를 가져올 때는 더보기 버튼을 보여주는 걸로\n\n          break;\n        }\n\n      case LOAD_FOLLOWERS_SUCCESS:\n        {\n          action.data.forEach(d => {\n            draft.followerList.push(d);\n          });\n          draft.hasMoreFollower = action.data.length === 3;\n          break;\n        }\n\n      case LOAD_FOLLOWERS_FAILURE:\n        {\n          break;\n        }\n\n      case LOAD_FOLLOWINGS_REQUEST:\n        {\n          draft.followingList = !action.offset ? [] : draft.followingList;\n          draft.hasMoreFollowing = action.offset ? draft.hasMoreFollowing : true; // 처음 데이터를 가져올 때는 더보기 버튼을 보여주는 걸로\n\n          break;\n        }\n\n      case LOAD_FOLLOWINGS_SUCCESS:\n        {\n          action.data.forEach(d => {\n            draft.followingList.push(d);\n          });\n          draft.hasMoreFollowing = action.data.length === 3;\n          break;\n        }\n\n      case LOAD_FOLLOWINGS_FAILURE:\n        {\n          break;\n        }\n\n      case REMOVE_FOLLOWER_REQUEST:\n        {\n          break;\n        }\n\n      case REMOVE_FOLLOWER_SUCCESS:\n        {\n          const index = draft.me.Followers.findIndex(v => v.id === action.data);\n          draft.me.Followers.splice(index, 1);\n          const index2 = draft.followerList.findIndex(v => v.id === action.data);\n          draft.followerList.splice(index2, 1);\n          break;\n        }\n\n      case REMOVE_FOLLOWER_FAILURE:\n        {\n          break;\n        }\n\n      case EDIT_NICKNAME_REQUEST:\n        {\n          draft.isEditingNickname = true;\n          draft.editNicknameErrorReason = '';\n          break;\n        }\n\n      case EDIT_NICKNAME_SUCCESS:\n        {\n          draft.isEditingNickname = false;\n          draft.me.nickname = action.data;\n          break;\n        }\n\n      case EDIT_NICKNAME_FAILURE:\n        {\n          draft.isEditingNickname = false;\n          draft.editNicknameErrorReason = action.error;\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  });\n});","map":{"version":3,"sources":["C:\\Users\\SKTelecom\\Documents\\jwh\\myproj\\react_proj_study\\react_nodebird\\frontend\\reducers\\user.js"],"names":["produce","initialState","isLoggingOut","isLoggingIn","logInErrorReason","isSignedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","isEditingNickname","editNicknameErrorReason","hasMoreFollower","hasMoreFollowing","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","EDIT_NICKNAME_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","state","action","draft","type","data","reason","error","useInfo","Followings","unshift","id","index","findIndex","v","splice","index2","Posts","offset","forEach","d","push","length","Followers","nickname"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,YAAY,EAAE,KADU;AACH;AACrBC,EAAAA,WAAW,EAAE,KAFW;AAEJ;AACpBC,EAAAA,gBAAgB,EAAE,EAHM;AAGF;AACtBC,EAAAA,UAAU,EAAE,KAJY;AAIL;AACnBC,EAAAA,WAAW,EAAE,KALW;AAKJ;AACpBC,EAAAA,iBAAiB,EAAE,EANK;AAMD;AACvBC,EAAAA,EAAE,EAAE,IAPoB;AAOd;AACVC,EAAAA,aAAa,EAAE,EARS;AAQL;AACnBC,EAAAA,YAAY,EAAE,EATU;AASN;AAClBC,EAAAA,QAAQ,EAAE,IAVc;AAUR;AAChBC,EAAAA,iBAAiB,EAAE,KAXK;AAWE;AAC1BC,EAAAA,uBAAuB,EAAE,EAZD;AAYK;AAC7BC,EAAAA,eAAe,EAAE,KAbO;AAcxBC,EAAAA,gBAAgB,EAAE;AAdM,CAArB;AAiBP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAAyC;;AAChD,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAAyC;;AAChD,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAAyC;;AAEhD,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AAEP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AAEP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,gBAAe,CAACC,KAAK,GAAG/C,YAAT,EAAuBgD,MAAvB,KAAkC;AAC7C,SAAOjD,OAAO,CAACgD,KAAD,EAASE,KAAD,IAAW;AAC7B,YAAQD,MAAM,CAACE,IAAf;AACI,WAAKhC,cAAL;AAAqB;AACjB+B,UAAAA,KAAK,CAAC/C,WAAN,GAAoB,IAApB;AACA+C,UAAAA,KAAK,CAAC9C,gBAAN,GAAyB,EAAzB;AACA;AACH;;AACD,WAAKgB,cAAL;AAAqB;AACjB8B,UAAAA,KAAK,CAAC/C,WAAN,GAAoB,KAApB;AACA+C,UAAAA,KAAK,CAAC9C,gBAAN,GAAyB,EAAzB;AACA8C,UAAAA,KAAK,CAAC1C,EAAN,GAAWyC,MAAM,CAACG,IAAlB;AACA;AACH;;AACD,WAAK/B,cAAL;AAAqB;AACjB6B,UAAAA,KAAK,CAAC/C,WAAN,GAAoB,KAApB;AACA+C,UAAAA,KAAK,CAAC9C,gBAAN,GAAyB6C,MAAM,CAACI,MAAhC;AACAH,UAAAA,KAAK,CAAC1C,EAAN,GAAW,IAAX;AACA;AACH;;AACD,WAAKiB,eAAL;AAAsB;AAClByB,UAAAA,KAAK,CAAChD,YAAN,GAAqB,IAArB;AACA;AACH;;AACD,WAAKwB,eAAL;AAAsB;AAClBwB,UAAAA,KAAK,CAAChD,YAAN,GAAqB,KAArB;AACAgD,UAAAA,KAAK,CAAC1C,EAAN,GAAW,IAAX;AACA;AACH;;AACD,WAAKQ,eAAL;AAAsB;AAClBkC,UAAAA,KAAK,CAAC7C,UAAN,GAAmB,KAAnB;AACA6C,UAAAA,KAAK,CAAC5C,WAAN,GAAoB,IAApB;AACA4C,UAAAA,KAAK,CAAC3C,iBAAN,GAA0B,EAA1B;AACA;AACH;;AACD,WAAKU,eAAL;AAAsB;AAClBiC,UAAAA,KAAK,CAAC5C,WAAN,GAAoB,KAApB;AACA4C,UAAAA,KAAK,CAAC7C,UAAN,GAAmB,IAAnB;AACA;AACH;;AACD,WAAKa,eAAL;AAAsB;AAClBgC,UAAAA,KAAK,CAAC5C,WAAN,GAAoB,KAApB;AACA4C,UAAAA,KAAK,CAAC3C,iBAAN,GAA0B0C,MAAM,CAACK,KAAjC;AACA;AACH;;AACD,WAAKhC,iBAAL;AAAwB;AACpB;AACH;;AACD,WAAKC,iBAAL;AAAwB;AACpB,cAAI0B,MAAM,CAACzC,EAAX,EAAe;AACX0C,YAAAA,KAAK,CAAC1C,EAAN,GAAWyC,MAAM,CAACG,IAAlB;AACA;AACH;;AACDF,UAAAA,KAAK,CAACK,OAAN,GAAgBN,MAAM,CAACG,IAAvB;AACA;AACH;;AACD,WAAK5B,iBAAL;AAAwB;AACpB;AACH;;AACD,WAAKU,mBAAL;AAA0B;AACtB;AACH;;AACD,WAAKC,mBAAL;AAA0B;AACtBe,UAAAA,KAAK,CAAC1C,EAAN,CAASgD,UAAT,CAAoBC,OAApB,CAA4B;AAAEC,YAAAA,EAAE,EAAET,MAAM,CAACG;AAAb,WAA5B;AACA;AACH;;AACD,WAAKhB,mBAAL;AAA0B;AACtB;AACH;;AACD,WAAKC,qBAAL;AAA4B;AACxB;AACH;;AACD,WAAKC,qBAAL;AAA4B;AACxB,gBAAMqB,KAAK,GAAGT,KAAK,CAAC1C,EAAN,CAASgD,UAAT,CAAoBI,SAApB,CAA8BC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAAST,MAAM,CAACG,IAAnD,CAAd;AACAF,UAAAA,KAAK,CAAC1C,EAAN,CAASgD,UAAT,CAAoBM,MAApB,CAA2BH,KAA3B,EAAkC,CAAlC;AACA,gBAAMI,MAAM,GAAGb,KAAK,CAACzC,aAAN,CAAoBmD,SAApB,CAA8BC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAAST,MAAM,CAACG,IAAnD,CAAf;AACAF,UAAAA,KAAK,CAACzC,aAAN,CAAoBqD,MAApB,CAA2BC,MAA3B,EAAmC,CAAnC;AACA;AACH;;AACD,WAAKxB,qBAAL;AAA4B;AACxB;AACH;;AACD,WAAKO,cAAL;AAAqB;AACjBI,UAAAA,KAAK,CAAC1C,EAAN,CAASwD,KAAT,CAAeP,OAAf,CAAuB;AAAEC,YAAAA,EAAE,EAAET,MAAM,CAACG;AAAb,WAAvB;AACA;AACH;;AACD,WAAKL,iBAAL;AAAwB;AACpB,gBAAMY,KAAK,GAAGT,KAAK,CAAC1C,EAAN,CAASwD,KAAT,CAAeJ,SAAf,CAAyBC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAAST,MAAM,CAACG,IAA9C,CAAd;AACAF,UAAAA,KAAK,CAAC1C,EAAN,CAASwD,KAAT,CAAeF,MAAf,CAAsBH,KAAtB,EAA6B,CAA7B;AACA;AACH;;AACD,WAAK/B,sBAAL;AAA6B;AACzBsB,UAAAA,KAAK,CAACxC,YAAN,GAAqB,CAACuC,MAAM,CAACgB,MAAR,GAAiB,EAAjB,GAAsBf,KAAK,CAACxC,YAAjD;AACAwC,UAAAA,KAAK,CAACpC,eAAN,GAAwBmC,MAAM,CAACgB,MAAP,GAAgBf,KAAK,CAACpC,eAAtB,GAAwC,IAAhE,CAFyB,CAE6C;;AACtE;AACH;;AACD,WAAKe,sBAAL;AAA6B;AACzBoB,UAAAA,MAAM,CAACG,IAAP,CAAYc,OAAZ,CAAqBC,CAAD,IAAO;AACvBjB,YAAAA,KAAK,CAACxC,YAAN,CAAmB0D,IAAnB,CAAwBD,CAAxB;AACH,WAFD;AAGAjB,UAAAA,KAAK,CAACpC,eAAN,GAAwBmC,MAAM,CAACG,IAAP,CAAYiB,MAAZ,KAAuB,CAA/C;AACA;AACH;;AACD,WAAKvC,sBAAL;AAA6B;AACzB;AACH;;AACD,WAAKC,uBAAL;AAA8B;AAC1BmB,UAAAA,KAAK,CAACzC,aAAN,GAAsB,CAACwC,MAAM,CAACgB,MAAR,GAAiB,EAAjB,GAAsBf,KAAK,CAACzC,aAAlD;AACAyC,UAAAA,KAAK,CAACnC,gBAAN,GAAyBkC,MAAM,CAACgB,MAAP,GAAgBf,KAAK,CAACnC,gBAAtB,GAAyC,IAAlE,CAF0B,CAE8C;;AACxE;AACH;;AACD,WAAKiB,uBAAL;AAA8B;AAC1BiB,UAAAA,MAAM,CAACG,IAAP,CAAYc,OAAZ,CAAqBC,CAAD,IAAO;AACvBjB,YAAAA,KAAK,CAACzC,aAAN,CAAoB2D,IAApB,CAAyBD,CAAzB;AACH,WAFD;AAGAjB,UAAAA,KAAK,CAACnC,gBAAN,GAAyBkC,MAAM,CAACG,IAAP,CAAYiB,MAAZ,KAAuB,CAAhD;AACA;AACH;;AACD,WAAKpC,uBAAL;AAA8B;AAC1B;AACH;;AACD,WAAKO,uBAAL;AAA8B;AAC1B;AACH;;AACD,WAAKC,uBAAL;AAA8B;AAC1B,gBAAMkB,KAAK,GAAGT,KAAK,CAAC1C,EAAN,CAAS8D,SAAT,CAAmBV,SAAnB,CAA6BC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAAST,MAAM,CAACG,IAAlD,CAAd;AACAF,UAAAA,KAAK,CAAC1C,EAAN,CAAS8D,SAAT,CAAmBR,MAAnB,CAA0BH,KAA1B,EAAiC,CAAjC;AACA,gBAAMI,MAAM,GAAGb,KAAK,CAACxC,YAAN,CAAmBkD,SAAnB,CAA6BC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAAST,MAAM,CAACG,IAAlD,CAAf;AACAF,UAAAA,KAAK,CAACxC,YAAN,CAAmBoD,MAAnB,CAA0BC,MAA1B,EAAkC,CAAlC;AACA;AACH;;AACD,WAAKrB,uBAAL;AAA8B;AAC1B;AACH;;AACD,WAAKC,qBAAL;AAA4B;AACxBO,UAAAA,KAAK,CAACtC,iBAAN,GAA0B,IAA1B;AACAsC,UAAAA,KAAK,CAACrC,uBAAN,GAAgC,EAAhC;AACA;AACH;;AACD,WAAK+B,qBAAL;AAA4B;AACxBM,UAAAA,KAAK,CAACtC,iBAAN,GAA0B,KAA1B;AACAsC,UAAAA,KAAK,CAAC1C,EAAN,CAAS+D,QAAT,GAAoBtB,MAAM,CAACG,IAA3B;AACA;AACH;;AACD,WAAKP,qBAAL;AAA4B;AACxBK,UAAAA,KAAK,CAACtC,iBAAN,GAA0B,KAA1B;AACAsC,UAAAA,KAAK,CAACrC,uBAAN,GAAgCoC,MAAM,CAACK,KAAvC;AACA;AACH;;AACD;AAAS;AACL;AACH;AArJL;AAuJH,GAxJa,CAAd;AAyJH,CA1JD","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n    isLoggingOut: false, // 로그아웃 시도중\r\n    isLoggingIn: false, // 로그인 시도중\r\n    logInErrorReason: '', // 로그인 실패 사유\r\n    isSignedUp: false, // 회원가입 성공\r\n    isSigningUp: false, // 회원가입 시도중\r\n    signUpErrorReason: '', // 회원가입 실패 사유\r\n    me: null, // 내 정보\r\n    followingList: [], // 팔로잉 리스트\r\n    followerList: [], // 팔로워 리스트\r\n    userInfo: null, // 남의 정보\r\n    isEditingNickname: false, // 이름 변경 중\r\n    editNicknameErrorReason: '', // 이름 변경 실패 사유\r\n    hasMoreFollower: false,\r\n    hasMoreFollowing: false,\r\n};\r\n\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; // 액션의 이름\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'; // 액션의 이름\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; // 액션의 이름\r\n\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n\r\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\r\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\r\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\r\n\r\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\r\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\r\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\r\n\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n\r\nexport const EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\r\nexport const EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\r\nexport const EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\r\n\r\nexport default (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case LOG_IN_REQUEST: {\r\n                draft.isLoggingIn = true;\r\n                draft.logInErrorReason = '';\r\n                break;\r\n            }\r\n            case LOG_IN_SUCCESS: {\r\n                draft.isLoggingIn = false;\r\n                draft.logInErrorReason = '';\r\n                draft.me = action.data;\r\n                break;\r\n            }\r\n            case LOG_IN_FAILURE: {\r\n                draft.isLoggingIn = false;\r\n                draft.logInErrorReason = action.reason;\r\n                draft.me = null;\r\n                break;\r\n            }\r\n            case LOG_OUT_REQUEST: {\r\n                draft.isLoggingOut = true;\r\n                break;\r\n            }\r\n            case LOG_OUT_SUCCESS: {\r\n                draft.isLoggingOut = false;\r\n                draft.me = null;\r\n                break;\r\n            }\r\n            case SIGN_UP_REQUEST: {\r\n                draft.isSignedUp = false;\r\n                draft.isSigningUp = true;\r\n                draft.signUpErrorReason = '';\r\n                break;\r\n            }\r\n            case SIGN_UP_SUCCESS: {\r\n                draft.isSigningUp = false;\r\n                draft.isSignedUp = true;\r\n                break;\r\n            }\r\n            case SIGN_UP_FAILURE: {\r\n                draft.isSigningUp = false;\r\n                draft.signUpErrorReason = action.error;\r\n                break;\r\n            }\r\n            case LOAD_USER_REQUEST: {\r\n                break;\r\n            }\r\n            case LOAD_USER_SUCCESS: {\r\n                if (action.me) {\r\n                    draft.me = action.data;\r\n                    break;\r\n                }\r\n                draft.useInfo = action.data;\r\n                break;\r\n            }\r\n            case LOAD_USER_FAILURE: {\r\n                break;\r\n            }\r\n            case FOLLOW_USER_REQUEST: {\r\n                break;\r\n            }\r\n            case FOLLOW_USER_SUCCESS: {\r\n                draft.me.Followings.unshift({ id: action.data });\r\n                break;\r\n            }\r\n            case FOLLOW_USER_FAILURE: {\r\n                break;\r\n            }\r\n            case UNFOLLOW_USER_REQUEST: {\r\n                break;\r\n            }\r\n            case UNFOLLOW_USER_SUCCESS: {\r\n                const index = draft.me.Followings.findIndex(v => v.id === action.data);\r\n                draft.me.Followings.splice(index, 1);\r\n                const index2 = draft.followingList.findIndex(v => v.id === action.data);\r\n                draft.followingList.splice(index2, 1);\r\n                break;\r\n            }\r\n            case UNFOLLOW_USER_FAILURE: {\r\n                break;\r\n            }\r\n            case ADD_POST_TO_ME: {\r\n                draft.me.Posts.unshift({ id: action.data });\r\n                break;\r\n            }\r\n            case REMOVE_POST_OF_ME: {\r\n                const index = draft.me.Posts.findIndex(v => v.id === action.data);\r\n                draft.me.Posts.splice(index, 1);\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWERS_REQUEST: {\r\n                draft.followerList = !action.offset ? [] : draft.followerList;\r\n                draft.hasMoreFollower = action.offset ? draft.hasMoreFollower : true; // 처음 데이터를 가져올 때는 더보기 버튼을 보여주는 걸로\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWERS_SUCCESS: {\r\n                action.data.forEach((d) => {\r\n                    draft.followerList.push(d);\r\n                });\r\n                draft.hasMoreFollower = action.data.length === 3;\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWERS_FAILURE: {\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWINGS_REQUEST: {\r\n                draft.followingList = !action.offset ? [] : draft.followingList;\r\n                draft.hasMoreFollowing = action.offset ? draft.hasMoreFollowing : true; // 처음 데이터를 가져올 때는 더보기 버튼을 보여주는 걸로\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWINGS_SUCCESS: {\r\n                action.data.forEach((d) => {\r\n                    draft.followingList.push(d);\r\n                });\r\n                draft.hasMoreFollowing = action.data.length === 3;\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWINGS_FAILURE: {\r\n                break;\r\n            }\r\n            case REMOVE_FOLLOWER_REQUEST: {\r\n                break;\r\n            }\r\n            case REMOVE_FOLLOWER_SUCCESS: {\r\n                const index = draft.me.Followers.findIndex(v => v.id === action.data);\r\n                draft.me.Followers.splice(index, 1);\r\n                const index2 = draft.followerList.findIndex(v => v.id === action.data);\r\n                draft.followerList.splice(index2, 1);\r\n                break;\r\n            }\r\n            case REMOVE_FOLLOWER_FAILURE: {\r\n                break;\r\n            }\r\n            case EDIT_NICKNAME_REQUEST: {\r\n                draft.isEditingNickname = true;\r\n                draft.editNicknameErrorReason = '';\r\n                break;\r\n            }\r\n            case EDIT_NICKNAME_SUCCESS: {\r\n                draft.isEditingNickname = false;\r\n                draft.me.nickname = action.data;\r\n                break;\r\n            }\r\n            case EDIT_NICKNAME_FAILURE: {\r\n                draft.isEditingNickname = false;\r\n                draft.editNicknameErrorReason = action.error;\r\n                break;\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}