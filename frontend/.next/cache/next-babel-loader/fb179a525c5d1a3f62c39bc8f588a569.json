{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport AppLayout from '../components/AppLayout';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport { Provider } from 'react-redux';\nimport reducer from '../reducers';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport axios from 'axios';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nvar NodeBird = function NodeBird(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"\\uB178\\uB4DC\\uBC84\\uB4DC\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.23.5/antd.min.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType,\n  store: PropTypes.object\n};\n\nNodeBird.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var ctx, Component, pageProps, state, cookie;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = context.ctx, Component = context.Component;\n            pageProps = {};\n            state = ctx.store.getState();\n            cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // isServer일때는 cookie값을 가져와서\n\n            axios.defaults.headers.Cookie = '';\n\n            if (ctx.isServer && cookie) {\n              axios.defaults.headers.Cookie = cookie; // 쿠키값을 직접 코딩으로 셋팅 해줘야 한다.\n              // axios.defaults.headers.Authorization = ''; // 이런식으로 토큰넘기는 방식으로도 할 수 있다.\n            }\n\n            if (!state.user.me) {\n              // user정보가 없을경우 user정보를 가져오는 saga ajax호출을 한다.\n              ctx.store.dispatch({\n                type: LOAD_USER_REQUEST\n              });\n            }\n\n            if (!Component.getInitialProps) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 10;\n            return Component.getInitialProps(ctx);\n\n          case 10:\n            _context.t0 = _context.sent;\n\n            if (_context.t0) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.t0 = {};\n\n          case 13:\n            pageProps = _context.t0;\n\n          case 14:\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar configureStore = function configureStore(initialState, options) {\n  // 사가 미들웨어 추가\n  var sagaMiddleware = createSagaMiddleware(); // 커스터마이징 코드 추가\n  //const middlewares = [sagaMiddleware];\n\n  var middlewares = [sagaMiddleware, function (store) {\n    return function (next) {\n      return function (action) {\n        console.log(action);\n        next(action);\n      };\n    };\n  }];\n  var enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 이 부분을 추가 코딩 해줘야함.(서버사이드렌더링을 위함)\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));","map":{"version":3,"sources":["C:\\Users\\SKTelecom\\Documents\\jwh\\myproj\\react_proj_study\\react_nodebird\\frontend\\pages\\_app.js"],"names":["React","Head","AppLayout","PropTypes","withRedux","withReduxSaga","Provider","reducer","createStore","compose","applyMiddleware","createSagaMiddleware","axios","rootSaga","LOAD_USER_REQUEST","NodeBird","Component","store","pageProps","propTypes","elementType","object","getInitialProps","context","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","next","action","console","log","enhancer","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PropTypes from 'prop-types';\r\nimport withRedux from 'next-redux-wrapper';\r\nimport withReduxSaga from 'next-redux-saga';\r\nimport {Provider} from 'react-redux';\r\nimport reducer from '../reducers';\r\nimport {createStore, compose, applyMiddleware} from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport axios from 'axios';\r\nimport rootSaga from '../sagas';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\n\r\nconst NodeBird = ({ Component, store, pageProps }) => {\r\n    return (\r\n        <Provider store={store}>\r\n            <Head>\r\n                <title>노드버드</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.23.5/antd.min.css\" />\r\n            </Head>\r\n            <AppLayout>\r\n                <Component {...pageProps} />\r\n            </AppLayout>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType,\r\n    store: PropTypes.object,\r\n};\r\n\r\nNodeBird.getInitialProps = async (context) => {\r\n    const { ctx, Component } = context;\r\n    let pageProps = {};\r\n\r\n    const state = ctx.store.getState();\r\n    const cookie = ctx.isServer ? ctx.req.headers.cookie : '';    // isServer일때는 cookie값을 가져와서\r\n    axios.defaults.headers.Cookie = '';\r\n    if (ctx.isServer && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;     // 쿠키값을 직접 코딩으로 셋팅 해줘야 한다.\r\n        // axios.defaults.headers.Authorization = ''; // 이런식으로 토큰넘기는 방식으로도 할 수 있다.\r\n    }\r\n    if (!state.user.me) { // user정보가 없을경우 user정보를 가져오는 saga ajax호출을 한다.\r\n        ctx.store.dispatch({\r\n            type: LOAD_USER_REQUEST,\r\n        });\r\n    }\r\n    if (Component.getInitialProps) {\r\n        pageProps = await Component.getInitialProps(ctx) || {};\r\n    }\r\n    return { pageProps };\r\n};\r\n\r\nconst configureStore = (initialState, options) => {\r\n    // 사가 미들웨어 추가\r\n    const sagaMiddleware = createSagaMiddleware();\r\n\r\n    // 커스터마이징 코드 추가\r\n    //const middlewares = [sagaMiddleware];\r\n    const middlewares = [sagaMiddleware, (store) => (next) => (action) => {\r\n        console.log(action);\r\n        next(action);\r\n    }]\r\n\r\n    const enhancer = process.env.NODE_ENV === 'production' ?\r\n        compose(applyMiddleware(...middlewares))\r\n        : compose(\r\n            applyMiddleware(...middlewares),\r\n            !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,\r\n        );\r\n    const store = createStore(reducer, initialState, enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);    // 이 부분을 추가 코딩 해줘야함.(서버사이드렌더링을 위함)\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\n\r\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));"]},"metadata":{},"sourceType":"module"}