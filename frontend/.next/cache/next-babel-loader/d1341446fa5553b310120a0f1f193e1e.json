{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, takeLatest, takeEvery, call, put, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS } from '../reducers/user';\naxios.defaults.baseURL = 'http://localhost:3065/api';\n\nfunction loginAPI(loginData) {\n  // 서버요청 부분\n  // axios처리\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/user/', signUpData);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data); //yield delay(2000);\n\n    yield put({\n      // put 은 dispatch와 같은 기능\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data); // throw new Error('회원가입 에러!!');\n    //yield delay(2000);\n\n    yield put({\n      // put 은 dispatch와 같은 기능\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: 'aaa'\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* loadUser() {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchSignUP() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchSignUP), fork(watchLoadUser)]);\n}","map":{"version":3,"sources":["C:\\Users\\SKTelecom\\Documents\\jwh\\myproj\\react_proj_study\\react_nodebird\\frontend\\sagas\\user.js"],"names":["axios","all","fork","takeLatest","takeEvery","call","put","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","defaults","baseURL","loginAPI","loginData","post","withCredentials","signUpAPI","signUpData","logOutAPI","loadUserAPI","get","login","action","result","data","type","e","console","error","signUp","logOut","loadUser","watchLogin","watchSignUP","watchLogOut","watchLoadUser","userSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,KAAtD,QAAkE,oBAAlE;AACA,SACIC,cADJ,EACoBC,cADpB,EACoCC,cADpC,EAEIC,eAFJ,EAEqBC,eAFrB,EAEsCC,eAFtC,EAGIC,eAHJ,EAGqBC,eAHrB,EAGsCC,eAHtC,EAIIC,iBAJJ,EAKIC,iBALJ,EAMIC,iBANJ,QAOO,kBAPP;AASAnB,KAAK,CAACoB,QAAN,CAAeC,OAAf,GAAyB,2BAAzB;;AAGA,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACxB;AACA;AACA,SAAOvB,KAAK,CAACwB,IAAN,CAAW,aAAX,EAA0BD,SAA1B,EAAqC;AAACE,IAAAA,eAAe,EAAC;AAAjB,GAArC,CAAP;AACH;;AACD,SAASC,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B,SAAO3B,KAAK,CAACwB,IAAN,CAAW,QAAX,EAAqBG,UAArB,CAAP;AACH;;AAED,SAASC,SAAT,GAAqB;AACjB;AACA,SAAO5B,KAAK,CAACwB,IAAN,CAAW,cAAX,EAA2B,EAA3B,EAA+B;AAClCC,IAAAA,eAAe,EAAE;AADiB,GAA/B,CAAP;AAGH;;AAED,SAASI,WAAT,GAAuB;AACnB;AACA,SAAO7B,KAAK,CAAC8B,GAAN,CAAU,QAAV,EAAoB;AACvBL,IAAAA,eAAe,EAAE;AADM,GAApB,CAAP;AAGH;;AAED,UAAUM,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAM5B,IAAI,CAACiB,QAAD,EAAWU,MAAM,CAACE,IAAlB,CAAzB,CADD,CAEC;;AACA,UAAM5B,GAAG,CAAC;AAAM;AACZ6B,MAAAA,IAAI,EAAC1B,cADC;AAENyB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAPD,CAOC,OAAME,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAM9B,GAAG,CAAC;AACN6B,MAAAA,IAAI,EAAEzB;AADA,KAAD,CAAT;AAGH;AACJ;;AACD,UAAU6B,MAAV,CAAiBP,MAAjB,EAAyB;AACrB,MAAI;AACA,UAAM3B,IAAI,CAACqB,SAAD,EAAYM,MAAM,CAACE,IAAnB,CAAV,CADA,CAEA;AACA;;AACA,UAAM5B,GAAG,CAAC;AAAM;AACZ6B,MAAAA,IAAI,EAAEpB;AADA,KAAD,CAAT;AAGH,GAPD,CAOE,OAAOqB,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAM9B,GAAG,CAAC;AACN6B,MAAAA,IAAI,EAAEnB,eADA;AAENsB,MAAAA,KAAK,EAAE;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUE,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMnC,IAAI,CAACuB,SAAD,CAAV;AACA,UAAMtB,GAAG,CAAC;AAAE;AACR6B,MAAAA,IAAI,EAAEvB;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOwB,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAM9B,GAAG,CAAC;AACN6B,MAAAA,IAAI,EAAEtB,eADA;AAENyB,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUK,QAAV,GAAqB;AACjB,MAAI;AACA;AACA,UAAMR,MAAM,GAAG,MAAM5B,IAAI,CAACwB,WAAD,CAAzB;AACA,UAAMvB,GAAG,CAAC;AAAE;AACR6B,MAAAA,IAAI,EAAEhB,iBADA;AAENe,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOE,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAM9B,GAAG,CAAC;AACN6B,MAAAA,IAAI,EAAElB,iBADA;AAENqB,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUM,UAAV,GAAsB;AAClB,QAAMvC,UAAU,CAACK,cAAD,EAAiBuB,KAAjB,CAAhB;AACH;;AACD,UAAUY,WAAV,GAAwB;AACpB,QAAMxC,UAAU,CAACW,eAAD,EAAkByB,MAAlB,CAAhB;AACH;;AACD,UAAUK,WAAV,GAAwB;AACpB,QAAMxC,SAAS,CAACO,eAAD,EAAkB6B,MAAlB,CAAf;AACH;;AACD,UAAUK,aAAV,GAA0B;AACtB,QAAMzC,SAAS,CAACc,iBAAD,EAAoBuB,QAApB,CAAf;AACH;;AAED,eAAe,UAAUK,QAAV,GAAoB;AAC/B,QAAM7C,GAAG,CAAC,CACNC,IAAI,CAACwC,UAAD,CADE,EAENxC,IAAI,CAAC0C,WAAD,CAFE,EAGN1C,IAAI,CAACyC,WAAD,CAHE,EAINzC,IAAI,CAAC2C,aAAD,CAJE,CAAD,CAAT;AAMH","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, takeLatest, takeEvery, call, put, delay} from 'redux-saga/effects';\r\nimport { \r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\r\n    LOAD_USER_FAILURE,\r\n    LOAD_USER_REQUEST,\r\n    LOAD_USER_SUCCESS,\r\n} from '../reducers/user';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3065/api';\r\n\r\n\r\nfunction loginAPI(loginData){\r\n    // 서버요청 부분\r\n    // axios처리\r\n    return axios.post('/user/login', loginData, {withCredentials:true});\r\n}\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('/user/', signUpData);\r\n}\r\n\r\nfunction logOutAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/logout', {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction loadUserAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get('/user/', {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* login(action){\r\n    try{\r\n        const result = yield call(loginAPI, action.data);\r\n        //yield delay(2000);\r\n        yield put({     // put 은 dispatch와 같은 기능\r\n            type:LOG_IN_SUCCESS,\r\n            data: result.data\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        });\r\n    }\r\n}\r\nfunction* signUp(action) {\r\n    try {\r\n        yield call(signUpAPI, action.data);\r\n        // throw new Error('회원가입 에러!!');\r\n        //yield delay(2000);\r\n        yield put({     // put 은 dispatch와 같은 기능\r\n            type: SIGN_UP_SUCCESS\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: 'aaa'\r\n        });\r\n    }\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // yield call(logOutAPI);\r\n        yield call(logOutAPI);\r\n        yield put({ // put은 dispatch 동일\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* loadUser() {\r\n    try {\r\n        // yield call(loadUserAPI);\r\n        const result = yield call(loadUserAPI);\r\n        yield put({ // put은 dispatch 동일\r\n            type: LOAD_USER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_USER_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST, login);\r\n}\r\nfunction* watchSignUP() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchLoadUser() {\r\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchSignUP),\r\n        fork(watchLoadUser),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}