{"ast":null,"code":"import { all, fork, takeLatest, call, put } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\nfunction loginAPI() {// 서버요청 부분\n  // axios처리\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      // put 은 dispatch와 같은 기능\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}","map":{"version":3,"sources":["C:\\Users\\SKTelecom\\Documents\\jwh\\myproj\\react_proj_study\\react_nodebird\\frontend\\sagas\\user.js"],"names":["all","fork","takeLatest","call","put","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","login","type","e","console","error","watchLogin","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAgD,oBAAhD;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,QAA+D,kBAA/D;;AAEA,SAASC,QAAT,GAAmB,CACf;AACA;AACH;;AAED,UAAUC,KAAV,GAAiB;AACb,MAAG;AACC,UAAMN,IAAI,CAACK,QAAD,CAAV;AACA,UAAMJ,GAAG,CAAC;AAAM;AACZM,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMK,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMP,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAEH;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUO,UAAV,GAAsB;AAClB,QAAMZ,UAAU,CAACG,cAAD,EAAiBI,KAAjB,CAAhB;AACH;;AAED,eAAe,UAAUM,QAAV,GAAoB;AAC/B,QAAMf,GAAG,CAAC,CACNC,IAAI,CAACa,UAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { all, fork, takeLatest, call, put} from 'redux-saga/effects';\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\nfunction loginAPI(){\r\n    // 서버요청 부분\r\n    // axios처리\r\n}\r\n\r\nfunction* login(){\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put({     // put 은 dispatch와 같은 기능\r\n            type:LOG_IN_SUCCESS\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST, login);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}