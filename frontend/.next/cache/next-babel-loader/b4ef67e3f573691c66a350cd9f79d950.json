{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nconst dummyUser = {\n  nickname: 'redsky',\n  Post: [],\n  Followings: [],\n  Followers: []\n};\nexport const initialState = {\n  isLoggedIn: false,\n  user: null,\n  signUpData: {}\n}; // action\n\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const loginAction = {\n  type: LOG_IN_REQUEST,\n  data: {\n    nickname: 'redsky'\n  }\n};\nexport const logoutAction = {\n  type: LOG_OUT_REQUEST\n}; // 동적인 데이터 처리는 함수로 argument를 받아서 셋팅한다.\n\nexport const signupAction = data => {\n  return {\n    type: SIGN_UP_REQUEST,\n    data: data\n  };\n}; // reducer\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: dummyUser\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:\\Users\\SKTelecom\\Documents\\jwh\\myproj\\react_proj_study\\react_nodebird\\frontend\\reducers\\user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","initialState","isLoggedIn","user","signUpData","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginAction","type","data","logoutAction","signupAction","reducer","state","action"],"mappings":";AAAA,MAAMA,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,QADI;AAEdC,EAAAA,IAAI,EAAE,EAFQ;AAGdC,EAAAA,UAAU,EAAE,EAHE;AAIdC,EAAAA,SAAS,EAAE;AAJG,CAAlB;AAOA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAE,KADY;AAExBC,EAAAA,IAAI,EAAE,IAFkB;AAGxBC,EAAAA,UAAU,EAAE;AAHY,CAArB,C,CAMP;;AACA,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,IAAI,EAAEV,cADiB;AAEvBW,EAAAA,IAAI,EAAE;AACFnB,IAAAA,QAAQ,EAAE;AADR;AAFiB,CAApB;AAMP,OAAO,MAAMoB,YAAY,GAAG;AACxBF,EAAAA,IAAI,EAAEP;AADkB,CAArB,C,CAIP;;AACA,OAAO,MAAMU,YAAY,GAAIF,IAAD,IAAU;AAClC,SAAO;AACHD,IAAAA,IAAI,EAAEJ,eADH;AAEHK,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM,C,CAOP;;AACA,MAAMG,OAAO,GAAG,CAACC,KAAK,GAACnB,YAAP,EAAqBoB,MAArB,KAAgC;AAC5C,UAAQA,MAAM,CAACN,IAAf;AACI,SAAKV,cAAL;AAAqB;AACjB,iCACOe,KADP;AAEIlB,UAAAA,UAAU,EAAE,IAFhB;AAGIC,UAAAA,IAAI,EAAEP;AAHV;AAKH;;AACD,SAAKY,eAAL;AAAsB;AAClB,iCACOY,KADP;AAEIlB,UAAAA,UAAU,EAAE,KAFhB;AAGIC,UAAAA,IAAI,EAAC;AAHT;AAKH;;AACD,SAAKQ,eAAL;AAAsB;AAClB,iCACOS,KADP;AAEIhB,UAAAA,UAAU,EAAEiB,MAAM,CAACL;AAFvB;AAIH;;AACD;AAAS;AACL,iCACOI,KADP;AAGH;AAzBL;AA2BH,CA5BD;;AA8BA,eAAeD,OAAf","sourcesContent":["const dummyUser = {\r\n    nickname: 'redsky',\r\n    Post: [],\r\n    Followings: [],\r\n    Followers: [],\r\n};\r\n\r\nexport const initialState = {\r\n    isLoggedIn: false,\r\n    user: null,\r\n    signUpData: {},\r\n};\r\n\r\n// action\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\n\r\nexport const loginAction = {\r\n    type: LOG_IN_REQUEST,\r\n    data: {\r\n        nickname: 'redsky',\r\n    }\r\n};\r\nexport const logoutAction = {\r\n    type: LOG_OUT_REQUEST,\r\n\r\n}\r\n// 동적인 데이터 처리는 함수로 argument를 받아서 셋팅한다.\r\nexport const signupAction = (data) => {\r\n    return {\r\n        type: SIGN_UP_REQUEST,\r\n        data: data\r\n    }\r\n}\r\n\r\n// reducer\r\nconst reducer = (state=initialState, action) => {\r\n    switch( action.type ){\r\n        case LOG_IN_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                user: dummyUser,\r\n            }\r\n        }\r\n        case LOG_OUT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                user:null,\r\n            }\r\n        }\r\n        case SIGN_UP_REQUEST: {\r\n            return {\r\n                ...state,\r\n                signUpData: action.data\r\n            }\r\n        }\r\n        default: {\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}