{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Form, List, Input, Comment } from 'antd';\nimport PropsTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport PostCardContent from './PostCardContent';\n\nvar PostCard = function PostCard(_ref) {\n  var v = _ref.v;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: v.id\n      }\n    });\n  }, [me && me.id]);\n  var onToggleComment = useCallback(function (e) {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onChangeCommentText = useCallback(function (e) {\n    e.preventDefault();\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\"\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, v.User.nickname[0]),\n    title: v.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: v.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(v.Comments ? v.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: v.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, null, item.User.nickname[0]),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propsTypes = {\n  v: PropsTypes.shape({\n    User: PropsTypes.object,\n    content: PropsTypes.string,\n    img: PropsTypes.string,\n    createdAt: PropsTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:\\Users\\SKTelecom\\Documents\\jwh\\myproj\\react_proj_study\\react_nodebird\\frontend\\components\\PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Form","List","Input","Comment","PropsTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCardContent","PostCard","v","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","post","commentAdded","isAddingComment","dispatch","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onToggleComment","prev","onChangeCommentText","target","value","User","nickname","content","Comments","length","item","propsTypes","shape","object","string","img","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport {Card, Icon, Button, Avatar, Form, List, Input, Comment} from 'antd';\r\nimport PropsTypes from 'prop-types';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nimport PostCardContent from './PostCardContent';\r\n\r\nconst PostCard = ({v}) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const {me} = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment} = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true]);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!me){\r\n            return alert('로그인이 필요합니다!');\r\n        }\r\n        return dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: {postId: v.id}\r\n        });\r\n    },[me && me.id]);\r\n\r\n    const onToggleComment = useCallback((e) => {\r\n        setCommentFormOpened(prev => !prev);\r\n    }, []);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        e.preventDefault();\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n        <Card\r\n            \r\n            actions={[\r\n                <Icon type=\"retweet\" key=\"retweet\" />,\r\n                <Icon type=\"heart\" key=\"heart\" />,\r\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n                <Icon type=\"ellipsis\" key=\"ellipsis\" />,\r\n            ]}\r\n            extra={<Button>팔로우</Button>}\r\n        >\r\n            <Card.Meta\r\n                avatar={<Avatar>{v.User.nickname[0]}</Avatar>}\r\n                title={v.User.nickname}\r\n                description={<PostCardContent postData={v.content} />}\r\n            />\r\n        </Card>\r\n        {commentFormOpened && (\r\n            <>\r\n                <Form onSubmit={onSubmitComment}>\r\n                    <Form.Item>\r\n                        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                    </Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n                </Form>\r\n                <List\r\n                    header={`${v.Comments ? v.Comments.length : 0} 댓글`}\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={v.Comments || []}\r\n                    renderItem={item => (\r\n                        <li>\r\n                            <Comment \r\n                                author={item.User.nickname} \r\n                                avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                content={item.content}\r\n                                 />\r\n                        </li>\r\n                    )}\r\n                >\r\n                </List>\r\n            </>\r\n        )}\r\n        </div>\r\n    );\r\n}\r\n\r\nPostCard.propsTypes = {\r\n    v: PropsTypes.shape({\r\n        User: PropsTypes.object,\r\n        content: PropsTypes.string,\r\n        img: PropsTypes.string,\r\n        createdAt: PropsTypes.object\r\n    })\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}