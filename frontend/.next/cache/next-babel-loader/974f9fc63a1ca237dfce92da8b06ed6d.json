{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport AppLayout from '../components/AppLayout';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport { Provider } from 'react-redux';\nimport reducer from '../reducers';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport axios from 'axios';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"\\uB178\\uB4DC\\uBC84\\uB4DC\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.23.5/antd.min.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType,\n  store: PropTypes.object\n};\n\nNodeBird.getInitialProps = async context => {\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {};\n  const state = ctx.store.getState();\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // isServer일때는 cookie값을 가져와서\n\n  axios.defaults.headers.Cookie = '';\n\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.Cookie = cookie; // 쿠키값을 직접 코딩으로 셋팅 해줘야 한다.\n    // axios.defaults.headers.Authorization = ''; // 이런식으로 토큰넘기는 방식으로도 할 수 있다.\n  }\n\n  if (!state.user.me) {\n    // user정보가 없을경우 user정보를 가져오는 saga ajax호출을 한다.\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (Component.getInitialProps) {\n    pageProps = (await Component.getInitialProps(ctx)) || {};\n  }\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  // 사가 미들웨어 추가\n  const sagaMiddleware = createSagaMiddleware(); // 커스터마이징 코드 추가\n  //const middlewares = [sagaMiddleware];\n\n  const middlewares = [sagaMiddleware, store => next => action => {\n    console.log(action);\n    next(action);\n  }];\n  const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // 이 부분을 추가 코딩 해줘야함.(서버사이드렌더링을 위함)\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));","map":{"version":3,"sources":["C:\\Users\\SKTelecom\\Documents\\jwh\\myproj\\react_proj_study\\react_nodebird\\frontend\\pages\\_app.js"],"names":["React","Head","AppLayout","PropTypes","withRedux","withReduxSaga","Provider","reducer","createStore","compose","applyMiddleware","createSagaMiddleware","axios","rootSaga","LOAD_USER_REQUEST","NodeBird","Component","store","pageProps","propTypes","elementType","object","getInitialProps","context","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","next","action","console","log","enhancer","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PropTypes from 'prop-types';\r\nimport withRedux from 'next-redux-wrapper';\r\nimport withReduxSaga from 'next-redux-saga';\r\nimport {Provider} from 'react-redux';\r\nimport reducer from '../reducers';\r\nimport {createStore, compose, applyMiddleware} from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport axios from 'axios';\r\nimport rootSaga from '../sagas';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\n\r\nconst NodeBird = ({ Component, store, pageProps }) => {\r\n    return (\r\n        <Provider store={store}>\r\n            <Head>\r\n                <title>노드버드</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.23.5/antd.min.css\" />\r\n            </Head>\r\n            <AppLayout>\r\n                <Component {...pageProps} />\r\n            </AppLayout>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType,\r\n    store: PropTypes.object,\r\n};\r\n\r\nNodeBird.getInitialProps = async (context) => {\r\n    const { ctx, Component } = context;\r\n    let pageProps = {};\r\n\r\n    const state = ctx.store.getState();\r\n    const cookie = ctx.isServer ? ctx.req.headers.cookie : '';    // isServer일때는 cookie값을 가져와서\r\n    axios.defaults.headers.Cookie = '';\r\n    if (ctx.isServer && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;     // 쿠키값을 직접 코딩으로 셋팅 해줘야 한다.\r\n        // axios.defaults.headers.Authorization = ''; // 이런식으로 토큰넘기는 방식으로도 할 수 있다.\r\n    }\r\n    if (!state.user.me) { // user정보가 없을경우 user정보를 가져오는 saga ajax호출을 한다.\r\n        ctx.store.dispatch({\r\n            type: LOAD_USER_REQUEST,\r\n        });\r\n    }\r\n    if (Component.getInitialProps) {\r\n        pageProps = await Component.getInitialProps(ctx) || {};\r\n    }\r\n    return { pageProps };\r\n};\r\n\r\nconst configureStore = (initialState, options) => {\r\n    // 사가 미들웨어 추가\r\n    const sagaMiddleware = createSagaMiddleware();\r\n\r\n    // 커스터마이징 코드 추가\r\n    //const middlewares = [sagaMiddleware];\r\n    const middlewares = [sagaMiddleware, (store) => (next) => (action) => {\r\n        console.log(action);\r\n        next(action);\r\n    }]\r\n\r\n    const enhancer = process.env.NODE_ENV === 'production' ?\r\n        compose(applyMiddleware(...middlewares))\r\n        : compose(\r\n            applyMiddleware(...middlewares),\r\n            !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,\r\n        );\r\n    const store = createStore(reducer, initialState, enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);    // 이 부분을 추가 코딩 해줘야함.(서버사이드렌더링을 위함)\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\n\r\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));"]},"metadata":{},"sourceType":"module"}