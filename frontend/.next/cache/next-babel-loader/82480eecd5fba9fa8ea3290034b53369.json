{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logOut),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUP),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogOut),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS } from '../reducers/user';\naxios.defaults.baseURL = 'http://localhost:3065/api';\n\nfunction loginAPI(loginData) {\n  // 서버요청 부분\n  // axios처리\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/user/', signUpData);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // put 은 dispatch와 같은 기능\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            // put 은 dispatch와 같은 기능\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: 'aaa'\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction loadUser() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadUserAPI);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            // put은 dispatch 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: LOAD_USER_FAILURE,\n            error: _context4.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignUP() {\n  return _regeneratorRuntime.wrap(function watchSignUP$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLogin), fork(watchLogOut), fork(watchSignUP), fork(watchLoadUser)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:\\Users\\SKTelecom\\Documents\\jwh\\myproj\\react_proj_study\\react_nodebird\\frontend\\sagas\\user.js"],"names":["login","signUp","logOut","loadUser","watchLogin","watchSignUP","watchLogOut","watchLoadUser","userSaga","axios","all","fork","takeLatest","call","put","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","defaults","baseURL","loginAPI","loginData","post","withCredentials","signUpAPI","signUpData","logOutAPI","loadUserAPI","get","action","data","result","type","console","error","takeEvery"],"mappings":";;;;yBAqCUA,K;;;yBAeAC,M;;;yBAiBAC,M;;;yBAgBAC,Q;;;yBAiBAC,U;;;yBAGAC,W;;;yBAGAC,W;;;yBAGAC,a;;;yBAIeC,Q;;AAnHzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2CC,KAA3C,QAAuD,oBAAvD;AACA,SACIC,cADJ,EACoBC,cADpB,EACoCC,cADpC,EAEIC,eAFJ,EAEqBC,eAFrB,EAEsCC,eAFtC,EAGIC,eAHJ,EAGqBC,eAHrB,EAGsCC,eAHtC,EAIIC,iBAJJ,EAKIC,iBALJ,EAMIC,iBANJ,QAOO,kBAPP;AASAlB,KAAK,CAACmB,QAAN,CAAeC,OAAf,GAAyB,2BAAzB;;AAGA,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACxB;AACA;AACA,SAAOtB,KAAK,CAACuB,IAAN,CAAW,aAAX,EAA0BD,SAA1B,EAAqC;AAACE,IAAAA,eAAe,EAAC;AAAjB,GAArC,CAAP;AACH;;AACD,SAASC,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B,SAAO1B,KAAK,CAACuB,IAAN,CAAW,QAAX,EAAqBG,UAArB,CAAP;AACH;;AAED,SAASC,SAAT,GAAqB;AACjB;AACA,SAAO3B,KAAK,CAACuB,IAAN,CAAW,cAAX,EAA2B,EAA3B,EAA+B;AAClCC,IAAAA,eAAe,EAAE;AADiB,GAA/B,CAAP;AAGH;;AAED,SAASI,WAAT,GAAuB;AACnB;AACA,SAAO5B,KAAK,CAAC6B,GAAN,CAAU,QAAV,EAAoB;AACvBL,IAAAA,eAAe,EAAE;AADM,GAApB,CAAP;AAGH;;AAED,SAAUjC,KAAV,CAAgBuC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAM1B,IAAI,CAACiB,QAAD,EAAWS,MAAM,CAACC,IAAlB,CAAV;;AAFvB;AAEcC,UAAAA,MAFd;AAAA;AAIQ,iBAAM3B,GAAG,CAAC;AAAM;AACZ4B,YAAAA,IAAI,EAACzB,cADC;AAENuB,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQG,UAAAA,OAAO,CAACC,KAAR;AATR;AAUQ,iBAAM9B,GAAG,CAAC;AACN4B,YAAAA,IAAI,EAAExB;AADA,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUjB,MAAV,CAAiBsC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAM1B,IAAI,CAACqB,SAAD,EAAYK,MAAM,CAACC,IAAnB,CAAV;;AAFR;AAAA;AAKQ,iBAAM1B,GAAG,CAAC;AAAM;AACZ4B,YAAAA,IAAI,EAAEnB;AADA,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQoB,UAAAA,OAAO,CAACC,KAAR;AATR;AAUQ,iBAAM9B,GAAG,CAAC;AACN4B,YAAAA,IAAI,EAAElB,eADA;AAENoB,YAAAA,KAAK,EAAE;AAFD,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAU1C,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMW,IAAI,CAACuB,SAAD,CAAV;;AAHR;AAAA;AAIQ,iBAAMtB,GAAG,CAAC;AAAE;AACR4B,YAAAA,IAAI,EAAEtB;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOkB;AACVuB,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAM9B,GAAG,CAAC;AACN4B,YAAAA,IAAI,EAAErB,eADA;AAENuB,YAAAA,KAAK;AAFC,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUzC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGuB,iBAAMU,IAAI,CAACwB,WAAD,CAAV;;AAHvB;AAGcI,UAAAA,MAHd;AAAA;AAIQ,iBAAM3B,GAAG,CAAC;AAAE;AACR4B,YAAAA,IAAI,EAAEf,iBADA;AAENa,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQkB;AACVG,UAAAA,OAAO,CAACC,KAAR;AATR;AAUQ,iBAAM9B,GAAG,CAAC;AACN4B,YAAAA,IAAI,EAAEjB,iBADA;AAENmB,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUxC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,UAAU,CAACI,cAAD,EAAiBhB,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUK,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACU,eAAD,EAAkBrB,MAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUK,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACO,eAAD,EAAkBjB,MAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUK,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMsC,SAAS,CAACnB,iBAAD,EAAoBvB,QAApB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUK,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNC,IAAI,CAACP,UAAD,CADE,EAENO,IAAI,CAACL,WAAD,CAFE,EAGNK,IAAI,CAACN,WAAD,CAHE,EAINM,IAAI,CAACJ,aAAD,CAJE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, takeLatest, call, put, delay} from 'redux-saga/effects';\r\nimport { \r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\r\n    LOAD_USER_FAILURE,\r\n    LOAD_USER_REQUEST,\r\n    LOAD_USER_SUCCESS,\r\n} from '../reducers/user';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3065/api';\r\n\r\n\r\nfunction loginAPI(loginData){\r\n    // 서버요청 부분\r\n    // axios처리\r\n    return axios.post('/user/login', loginData, {withCredentials:true});\r\n}\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('/user/', signUpData);\r\n}\r\n\r\nfunction logOutAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/logout', {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction loadUserAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get('/user/', {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* login(action){\r\n    try{\r\n        const result = yield call(loginAPI, action.data);\r\n        //yield delay(2000);\r\n        yield put({     // put 은 dispatch와 같은 기능\r\n            type:LOG_IN_SUCCESS,\r\n            data: result.data\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        });\r\n    }\r\n}\r\nfunction* signUp(action) {\r\n    try {\r\n        yield call(signUpAPI, action.data);\r\n        // throw new Error('회원가입 에러!!');\r\n        //yield delay(2000);\r\n        yield put({     // put 은 dispatch와 같은 기능\r\n            type: SIGN_UP_SUCCESS\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: 'aaa'\r\n        });\r\n    }\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // yield call(logOutAPI);\r\n        yield call(logOutAPI);\r\n        yield put({ // put은 dispatch 동일\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* loadUser() {\r\n    try {\r\n        // yield call(loadUserAPI);\r\n        const result = yield call(loadUserAPI);\r\n        yield put({ // put은 dispatch 동일\r\n            type: LOAD_USER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_USER_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST, login);\r\n}\r\nfunction* watchSignUP() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchLoadUser() {\r\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchSignUP),\r\n        fork(watchLoadUser),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}